import os
from datetime import date, datetime, timezone

import matplotlib.pyplot as plt
import numpy as np
from flask import (Blueprint, Response, current_app, flash, make_response,
                   redirect, render_template, request, send_from_directory)
from flask import session as flask_session
from matplotlib.figure import Figure
from sqlalchemy import and_
from sqlalchemy.orm import Query, sessionmaker

from .db import db

bp = Blueprint('visualize', __name__, url_prefix="")

# Amount of days we should refresh the visualization
EXPIRE_DAYS = 7
# Amount of months we should go back to visualize
VISUALIZE_MONTHS = 6


@bp.route("/visualize")
def visualize():
    # Make sure the user is userLVL 0 or 1
    user_level: int = flask_session.get("userLVL", default=None)
    # Rely on short circuit eval here...
    if (user_level is None) or user_level > 1:
        flash("Not authorized")
        return redirect("/")

    # Call function for each visualization.
    # These will check if they needed to be remade then remake them.
    visual_image1_png()
    visual_image2_png()
    visual_image3_png()
    visual_image4_png()
    visual_image5_png()

    return render_template("visualize.html", role=user_level, title="Visualize")


def visual_image1_png():
    """ 
    This is an image that is dynamically generated by plots from the database.
    This image is a 3x3 subplot of Durations in each stage and overall. g]
    """
    global EXPIRE_DAYS
    global VISUALIZE_MONTHS

    visualization_name = "visual_durations.png"
    # Check if file exists
    if (os.path.exists(os.path.join(current_app.config['UPLOAD_FOLDER'], visualization_name))):
        # Check if the file is under the date required to renew
        if ((date.today() -
            datetime.fromtimestamp(
            os.path.getmtime(os.path.join(
                current_app.config['UPLOAD_FOLDER'], visualization_name)), timezone.utc).date()
             ).days < EXPIRE_DAYS):
            return
        # File is expired. Remove the old one
        else:
            os.remove(os.path.join(
                current_app.config["UPLOAD_FOLDER"], visualization_name))

    # We have not returned. So must be time to make a new visualization

    # Open a database session
    engine = db.get_db_engine()
    db_session = (sessionmaker(bind=engine))()

    # Pull the last x months of data.
    # This will return a list (of up to x) of the Class MetaInformation (from db.py)
    data_list = db_session.query(db.MetaInformation).\
        order_by(db.MetaInformation.year.desc(), db.MetaInformation.month.desc()).\
        limit(VISUALIZE_MONTHS).all()

    # Close the database like a good boy
    db_session.close()

    # Get the length of our list
    x = len(data_list)

    # create empty numpy arrays to hold our values for visualization
    months = np.empty(x, dtype=object)
    stage1 = np.empty(x, dtype=float)
    stage2 = np.empty(x, dtype=float)
    stage3 = np.empty(x, dtype=float)
    stage4 = np.empty(x, dtype=float)
    stage5 = np.empty(x, dtype=float)
    stage6 = np.empty(x, dtype=float)
    stage7 = np.empty(x, dtype=float)
    total = np.empty(x, dtype=float)

    # Go row by row in our list taken from the database and put them in the arrays
    for row in data_list:
        # We want to put them into the array in reverse. (Using our amount pulled from database)
        # so that the most recent month is to the right of the visualization
        x -= 1
        # Month as an number with 1 leading 0
        months[x] = "{:02d}".format(row.month)
        # Figure out the average by taking total amount / #of animals
        # Make sure each one is not 0 before dividing.
        # 0 Means none of that type were found in that period
        # Stage 1
        if row.animalsCompStage1 != 0:
            stage1[x] = (row.totalDaysCompStage1/row.animalsCompStage1)
        else:
            stage1[x] = None
        # Stage 2
        if row.animalsCompStage2 != 0:
            stage2[x] = (row.totalDaysCompStage2/row.animalsCompStage2)
        else:
            stage2[x] = None
        # Stage 3
        if row.animalsCompStage3 != 0:
            stage3[x] = (row.totalDaysCompStage3/row.animalsCompStage3)
        else:
            stage3[x] = None
        # Stage 4
        if row.animalsCompStage4 != 0:
            stage4[x] = (row.totalDaysCompStage4/row.animalsCompStage4)
        else:
            stage4[x] = None
        # Stage 5
        if row.animalsCompStage5 != 0:
            stage5[x] = (row.totalDaysCompStage5/row.animalsCompStage5)
        else:
            stage5[x] = None
        # Stage 6
        if row.animalsCompStage6 != 0:
            stage6[x] = (row.totalDaysCompStage6/row.animalsCompStage6)
        else:
            stage6[x] = None
        # Stage 7
        if row.animalsCompStage7 != 0:
            stage7[x] = (row.totalDaysCompStage7/row.animalsCompStage7)
        else:
            stage7[x] = None
        # Complete Duration
        if row.totalStagesAmount != 0:
            total[x] = (row.totalStagesLength/row.totalStagesAmount)
        else:
            total[x] = None

    # Create a subplot matrix (3x3)
    fig, axs = plt.subplots(3, 3)
    # Add a Title
    fig.suptitle("Average Duration in Stages", fontsize='xx-large')
    # Add a y label
    fig.text(0.5, 0.04, 'Month', ha='center', va='center', fontsize='large')
    # Add a x label
    fig.text(0.06, 0.5, 'Average Duration (Days)', ha='center',
             va='center', rotation='vertical', fontsize='large')
    # Add a note at the bottom left for the date
    fig.text(0, 0, 'Created on {}'.format(date.today()))

    # Set axis plots with our data
    # Stage 1
    axs[0, 0].plot(months, stage1, 'b')
    axs[0, 0].set_title(label="Stage 1", y=1)
    # Stage 2
    axs[0, 1].plot(months, stage2, 'b')
    axs[0, 1].set_title(label="Stage 2", y=1)
    # Stage 3
    axs[0, 2].plot(months, stage3, 'b')
    axs[0, 2].set_title(label="Stage 3", y=1)
    # Stage 4
    axs[1, 0].plot(months, stage4, 'b')
    axs[1, 0].set_title(label="Stage 4", y=1)
    # Stage 5
    axs[1, 1].plot(months, stage5, 'b')
    axs[1, 1].set_title(label="Stage 5", y=1)
    # Stage 6
    axs[1, 2].plot(months, stage6, 'b')
    axs[1, 2].set_title(label="Stage 6", y=1)
    # Stage 7
    axs[2, 0].plot(months, stage7, 'b')
    axs[2, 0].set_title(label="Stage 7", y=1)
    # Stage Total
    axs[2, 1].plot(months, total, 'm')
    axs[2, 1].set_title(label="Full Length", y=1)
    # Unused Axis, so just hide
    axs[2, 2].set_axis_off()

    # Adjust the margins between subplots
    plt.subplots_adjust(wspace=0.25, hspace=1)

    # Go through each axis and set the base to 0
    for ax in axs.flat:
        ax.set_ylim(ymin=0)

    # Convert the graph to a png
    plt.savefig(os.path.join(
                current_app.config['UPLOAD_FOLDER'], visualization_name), dpi=300)
    plt.close()

    return


def visual_image2_png():
    """ 
    This is an image that is dynamically generated by plots from the database.
    This image is a 2x2 subplot of growth of each part of the application
    """
    global EXPIRE_DAYS
    global VISUALIZE_MONTHS

    # What the plot will be saved as.
    visualization_name = "visual_growth.png"
    # Check if file exists
    if (os.path.exists(os.path.join(current_app.config['UPLOAD_FOLDER'], visualization_name))):
        # Check if the file is under the date required to renew
        if ((date.today() -
            datetime.fromtimestamp(
            os.path.getmtime(os.path.join(
                current_app.config['UPLOAD_FOLDER'], visualization_name)), timezone.utc).date()
             ).days < EXPIRE_DAYS):
            return
        # File is expired. Remove the old one
        else:
            os.remove(os.path.join(
                current_app.config["UPLOAD_FOLDER"], visualization_name))

    # We have not returned. So must be time to make a new visualization

    # Open a database session
    engine = db.get_db_engine()
    db_session = (sessionmaker(bind=engine))()

    # Pull the last x months of data.
    # This will return a list (of up to x) of the Class MetaInformation (from db.py)
    data_list = db_session.query(db.MetaInformation).\
        order_by(db.MetaInformation.year.desc(), db.MetaInformation.month.desc()).\
        limit(VISUALIZE_MONTHS).all()

    # Close the database like a good boy
    db_session.close()

    # Get the length of our list
    x = len(data_list)

    # create empty numpy arrays to hold our values for visualization
    months = np.empty(x, dtype=object)
    users = np.empty(x, dtype=float)
    animals = np.empty(x, dtype=float)
    rescues = np.empty(x, dtype=float)
    pounds = np.empty(x, dtype=float)

    # Go row by row in our list taken from the database and put them in the arrays
    for row in data_list:
        # We want to put them into the array in reverse. (Using our amount pulled from database)
        # so that the most recent month is to the right of the visualization
        x -= 1
        # Month as an number with 1 leading 0
        months[x] = "{:02d}".format(row.month)
        # Get amount of users for each month
        users[x] = row.users
        # Get amount of rescues for each month
        rescues[x] = row.rescues
        # Get amount of pounds for each month
        pounds[x] = row.pounds
        # Get amount of animals for each month
        animals[x] = row.totalAnimalsInSystem

    # Create a subplot matrix
    fig, axs = plt.subplots(2, 2)
    # Add a Title
    fig.suptitle("Growth of Application", fontsize='xx-large')
    # Add a x label
    fig.text(0.5, 0.04, 'Month', ha='center', va='center', fontsize='large')
    # Add a y label
    fig.text(0.06, 0.5, 'Amount in System', ha='center',
             va='center', rotation='vertical', fontsize='large')
    # Add a note at the bottom left for the date
    fig.text(0, 0, 'Created on {}'.format(date.today()))

    # Set axis plots with our data
    # Users
    axs[0, 0].bar(months, users, color='b')
    axs[0, 0].set_title(label="Users", y=1)
    # Rescues
    axs[0, 1].bar(months, rescues, color='y')
    axs[0, 1].set_title(label="Rescues", y=1)
    # Pounds
    axs[1, 0].bar(months, pounds, color='r')
    axs[1, 0].set_title(label="Pounds", y=1)
    # Animals
    axs[1, 1].bar(months, animals, color='g')
    axs[1, 1].set_title(label="Animals", y=1)

    # Adjust the margins between subplots
    plt.subplots_adjust(wspace=0.25, hspace=0.4)

    # Convert the graph to a png
    plt.savefig(os.path.join(
                current_app.config['UPLOAD_FOLDER'], visualization_name), dpi=300)
    plt.close()

    return


def visual_image3_png():
    """ 
    This is an image that is dynamically generated by plots from the database.
    This image is a bar plot current animals in each stage.
    """
    global EXPIRE_DAYS

    # What our visualization will be saved as
    visualization_name = "visual_distribution.png"
    # Check if file exists
    if (os.path.exists(os.path.join(current_app.config['UPLOAD_FOLDER'], visualization_name))):
        # Check if the file is under the date required to renew
        if ((date.today() -
            datetime.fromtimestamp(
            os.path.getmtime(os.path.join(
                current_app.config['UPLOAD_FOLDER'], visualization_name)), timezone.utc).date()
             ).days < EXPIRE_DAYS):
            return
        # File is expired. Remove the old one
        else:
            os.remove(os.path.join(
                current_app.config["UPLOAD_FOLDER"], visualization_name))

    # We have not returned. So must be time to make a new visualization

    # Open a database session
    engine = db.get_db_engine()
    db_session = (sessionmaker(bind=engine))()

    # Create a list of our x labels
    stage = ["0", "1", "2", "3", "4", "5", "6", "7"]

    amount = np.empty(8, dtype=object)

    # Pull the count of current database of each animal in each stage
    for x in range(0, 8, 1):
        amount[x] = db_session.query(db.Animals).filter(
            db.Animals.stage == x).count()

    # Close the database like a good boy
    db_session.close()

    # Create a new figure to hold our ax
    fig = plt.figure()
    # Add an ax to the figure
    ax = fig.add_axes([0.10, 0.10, 0.8, 0.8])
    # Add a Title
    fig.suptitle("Animal Distribution by Stage", fontsize='xx-large')
    # Add a x label
    fig.text(0.5, 0.04, 'Stage', ha='center', va='center', fontsize='large')
    # Add a y label
    fig.text(0.06, 0.5, 'Amount in System', ha='center',
             va='center', rotation='vertical', fontsize='large')
    # Add a note at the bottom left for the date
    fig.text(0, 0, 'Created on {}'.format(date.today()))

    # Create the bar graph
    ax.bar(stage, amount, color='b')

    # Convert the graph to a png
    plt.savefig(os.path.join(
                current_app.config['UPLOAD_FOLDER'], visualization_name), dpi=300)
    plt.close()

    return


def visual_image4_png():
    """ 
    This is an image that is dynamically generated by plots from the database.
    This image is a bar plot of the count of outcomes of animals in our system.
    """
    global EXPIRE_DAYS

    # What our visualization is saved as
    visualization_name = "visual_outcome_distribution.png"
    # Check if file exists
    if (os.path.exists(os.path.join(current_app.config['UPLOAD_FOLDER'], visualization_name))):
        # Check if the file is under the date required to renew
        if ((date.today() -
            datetime.fromtimestamp(
            os.path.getmtime(os.path.join(
                current_app.config['UPLOAD_FOLDER'], visualization_name)), timezone.utc).date()
             ).days < EXPIRE_DAYS):
            return
        # File is expired. Remove the old one
        else:
            os.remove(os.path.join(
                current_app.config["UPLOAD_FOLDER"], visualization_name))

    # We have not returned. So must be time to make a new visualization

    # Open a database session
    engine = db.get_db_engine()
    db_session = (sessionmaker(bind=engine))()

    # List of X labels
    x_labels = ["Adopted", "Palliative Care", "Foster", "Euthanized", "Other"]

    amount = np.empty(5, dtype=object)
    # Pull the count of current database of each outcome
    for x in range(0, 5, 1):
        amount[x] = db_session.query(db.StageInfo).filter(
            and_(db.StageInfo.stageNum == 8, db.StageInfo.substageNum == (x+1))).count()

    # Close the database like a good boy
    db_session.close()

    # Create a figure to hold our plot
    fig = plt.figure()

    # Add an ax to the figure
    ax = fig.add_axes([0.13, 0.13, 0.8, 0.8])

    # Add a Title
    fig.suptitle("Total Outcome Distribution", fontsize='xx-large')
    # Add a x label
    fig.text(0.5, 0.04, 'Outcome', ha='center', va='center', fontsize='large')
    # Add a y label
    fig.text(0.06, 0.5, 'Amount in System', ha='center',
             va='center', rotation='vertical', fontsize='large')
    # Add a note at the bottom left for the date
    fig.text(0, 0, 'Created on {}'.format(date.today()))

    # Create our bar graph
    ax.bar(x_labels, amount, color='g')

    # Convert the graph to a png
    plt.savefig(os.path.join(
                current_app.config['UPLOAD_FOLDER'], visualization_name), dpi=300)
    plt.close()

    return


def visual_image5_png():
    """ 
    This is an image that is dynamically generated by plots from the database.
    This image is a 3x2 subplot of how many of each outcome per month.
    """
    global EXPIRE_DAYS
    global VISUALIZE_MONTHS

    visualization_name = "visual_outcome_monthly.png"
    # Check if file exists
    if (os.path.exists(os.path.join(current_app.config['UPLOAD_FOLDER'], visualization_name))):
        # Check if the file is under the date required to renew
        if ((date.today() -
            datetime.fromtimestamp(
            os.path.getmtime(os.path.join(
                current_app.config['UPLOAD_FOLDER'], visualization_name)), timezone.utc).date()
             ).days < EXPIRE_DAYS):
            return
        # File is expired. Remove the old one
        else:
            os.remove(os.path.join(
                current_app.config["UPLOAD_FOLDER"], visualization_name))

    # We have not returned. So must be time to make a new visualization

    # Open a database session
    engine = db.get_db_engine()
    db_session = (sessionmaker(bind=engine))()

    # Pull the last x months of data.
    # This will return a list (of up to x) of the Class MetaInformation (from db.py)
    data_list = db_session.query(db.MetaInformation).\
        order_by(db.MetaInformation.year.desc(), db.MetaInformation.month.desc()).\
        limit(VISUALIZE_MONTHS).all()

    # Close the database like a good boy
    db_session.close()

    # Get the length of our list
    x = len(data_list)

    # create empty numpy arrays to hold our values for visualization
    months = np.empty(x, dtype=object)
    outcome1 = np.empty(x, dtype=float)
    outcome2 = np.empty(x, dtype=float)
    outcome3 = np.empty(x, dtype=float)
    outcome4 = np.empty(x, dtype=float)
    outcome5 = np.empty(x, dtype=float)

    # Go row by row in our list taken from the database and put them in the arrays
    for row in data_list:
        # We want to put them into the array in reverse. (Using our amount pulled from database)
        # so that the most recent month is to the right of the visualization
        x -= 1
        # Month as an number with 1 leading 0
        months[x] = "{:02d}".format(row.month)

        # Get amount for each of the outcomes by month
        outcome1[x] = row.totalOutcome1
        outcome2[x] = row.totalOutcome2
        outcome3[x] = row.totalOutcome3
        outcome4[x] = row.totalOutcome4
        outcome5[x] = row.totalOutcome5

    # Create a subplot matrix (3x2)
    fig, axs = plt.subplots(3, 2)
    # Add a Title
    fig.suptitle("Outcomes Each Month", fontsize='xx-large')
    # Add a x label
    fig.text(0.5, 0.04, 'Month', ha='center', va='center', fontsize='large')
    # Add a y label
    fig.text(0.06, 0.5, 'Amount per Outcome', ha='center',
             va='center', rotation='vertical', fontsize='large')
    # Add a note at the bottom left for the date
    fig.text(0, 0, 'Created on {}'.format(date.today()))

    # Set axis plots with our data
    # Outcome 1
    axs[0, 0].plot(months, outcome1, 'b')
    axs[0, 0].set_title(label="Adopted", y=1)
    # Outcome 2
    axs[0, 1].plot(months, outcome2, 'b')
    axs[0, 1].set_title(label="Palliative Care", y=1)
    # Outcome 3
    axs[1, 0].plot(months, outcome3, 'b')
    axs[1, 0].set_title(label="Foster", y=1)
    # Outcome 4
    axs[1, 1].plot(months, outcome4, 'b')
    axs[1, 1].set_title(label="Euthanized", y=1)
    # Outcome 5
    axs[2, 0].plot(months, outcome5, 'b')
    axs[2, 0].set_title(label="Other", y=1)
    # Unused Axis, so just hide
    axs[2, 1].set_axis_off()

    # Adjust the margins between subplots
    plt.subplots_adjust(wspace=0.25, hspace=1)

    # Go through each axis and set the base to 0
    for ax in axs.flat:
        ax.set_ylim(ymin=0)

    # Convert the graph to a png
    plt.savefig(os.path.join(
                current_app.config['UPLOAD_FOLDER'], visualization_name), dpi=300)
    plt.close()

    return
