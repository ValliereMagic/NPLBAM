import nacl.pwhash
from flask import Blueprint, redirect, render_template, request, Response
from flask import session as flask_session
from sqlalchemy.orm import Query, relationship, sessionmaker

from . import account_tools
from .db import db

import io
import pandas as pd
import plotnine as p9
from plotnine.data import *
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure


bp = Blueprint('visualize', __name__, url_prefix="")

@bp.route("/visualize")
def visualize():
    # Make sure the user is userLVL 0 or 1
    user_level: int = flask_session.get("userLVL", default=None)
    # Rely on short circuit eval here...
    if (user_level is None) or user_level > 1:
        # May need to change where we redirect them in the future
        return redirect("/")
    return render_template("visualize.html", title="Visualize")



@bp.route("/visual_image.png")
def visual_image1_png():
    """ 
    This is a image that is dynamically generated by plots from the database.
    """
    # Static info for now, soon to be switched with dynamic.

    # Create the dataframe
    df = pd.DataFrame(columns=["month", "Days"])
    # Add to the frame row by row
    df = df.append({
        "month": "2020-12",
        "Days":  5
        }, ignore_index=True)

    df = df.append({
        "month": "2021-01",
        "Days":  10
        }, ignore_index=True)

    df = df.append({
        "month": "2021-02",
        "Days":  22
        }, ignore_index=True)

    df = df.append({
        "month": "2021-03",
        "Days":  15
        }, ignore_index=True)

    # Make the graph
    my_plot = p9.ggplot(data= df, mapping=p9.aes(x='month', y='Days')) + p9.geom_col(fill='blue')
    my_plot = my_plot + p9.labs(title="Average Stage 1 Duration", x="Months", y="Duration (Days)")
    # Convert the graph to a png
    output = io.BytesIO()
    FigureCanvas(my_plot.draw()).print_png(output)

    # Return the png
    return Response(output.getvalue(), mimetype='image/png')